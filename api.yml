AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for deployment of Dashboard API
Transform: AWS::Serverless-2016-10-31

Parameters:

  DashboardLambdaPath:
    Type: String
  MetaflowBucket:
    Type: String
  ArtifactBucket:
    Type: String
  MetaflowEventStore:
    Type: String
  MetaflowEventStoreIndex:
    Type: String
  MetaflowCredentialsAutomatorUrl:
    Type: String
  MetaflowApiKeyReference:
    Type: String
  DashbordHostBaseUrl:
    Type: String

Resources:

  ApiHostingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: metaflow-dashboard

  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: "Metaflow Dashboard API"

  # Dashboard Configuration

  ApiGatewayBaseAPIDashboardResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'dashboard'
      RestApiId: !Ref Api

  ApiGatewayBaseAPIDashboardProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayBaseAPIDashboardResource
      PathPart: '{proxy+}'
      RestApiId: !Ref Api

  ApiRouteDashboardMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn:
      - "ApiGatewayBaseAPIDashboardProxyResource"
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayBaseAPIDashboardProxyResource
      RestApiId: !Ref Api
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        CacheKeyParameters:
          - 'method.request.path.proxy'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub ${DashbordHostBaseUrl}/{proxy}
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200

  # Api Setup

  ApiGatewayBaseFlowsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'flows'
      RestApiId: !Ref Api

  ApiRouteFlowsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayBaseFlowsResource
      RestApiId: !Ref "Api"


  ApiGatewayCountResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayBaseFlowsResource
      PathPart: 'count'
      RestApiId: !Ref Api

  
  ApiRouteCountMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayCountResource
      RestApiId: !Ref "Api"


  ApiGatewayFlowAllResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayBaseFlowsResource
      PathPart: 'all'
      RestApiId: !Ref Api

  ApiGatewayFlowTimestampResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowAllResource
      PathPart: '{timestamp}'
      RestApiId: !Ref Api

  ApiRoutFlowTimestampeMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayFlowTimestampResource
      RestApiId: !Ref "Api"


  ApiGatewayFlowNameResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayBaseFlowsResource
      PathPart: '{flow_name}'
      RestApiId: !Ref Api


  ApiGatewayFlowCountResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowNameResource
      PathPart: 'count'
      RestApiId: !Ref Api

  ApiRouteFlowCountMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayFlowCountResource
      RestApiId: !Ref "Api"


  ApiGatewayRunSinceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowNameResource
      PathPart: '{timestamp}'
      RestApiId: !Ref Api


  ApiRouteRunSinceMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayRunSinceResource
      RestApiId: !Ref "Api"


  ApiGatewayRecentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowNameResource
      PathPart: 'recent'
      RestApiId: !Ref Api


  ApiRouteRecentMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayRecentResource
      RestApiId: !Ref "Api"


  ApiGatewayLastRunResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowNameResource
      PathPart: 'last'
      RestApiId: !Ref Api


  ApiRouteLastRunMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayLastRunResource
      RestApiId: !Ref "Api"


  ApiGatewayFlowRunResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowNameResource
      PathPart: 'runs'
      RestApiId: !Ref Api


  ApiGatewayFlowRunDataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowRunResource
      PathPart: '{run_id}'
      RestApiId: !Ref Api


  ApiRouteFlowRunMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayFlowRunDataResource
      RestApiId: !Ref "Api"


  ApiGatewayRunArtifactsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiGatewayFlowRunDataResource
      PathPart: 'artifacts'
      RestApiId: !Ref Api

  ApiRouteRunArtifactsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DashboardApiLambda.Arn"
      ResourceId: !Ref ApiGatewayRunArtifactsResource
      RestApiId: !Ref "Api"

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt DashboardApiLambda.Arn

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiRouteRunArtifactsMethod"
      - ApiRouteLastRunMethod
      - ApiRouteRecentMethod
      - ApiRouteRunSinceMethod
      - ApiRouteFlowRunMethod
      - ApiRouteFlowCountMethod
      - ApiRoutFlowTimestampeMethod
      - ApiRouteCountMethod
      - ApiRouteFlowsMethod
    Properties:
      RestApiId: !Ref "Api"
      StageName: "api"

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn:
      - Api
      - ApiDeployment
    Properties:
      ApiStages: 
      - ApiId: !Ref Api
        Stage: api
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]

  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn:
      - Api
      - ApiDeployment
    Properties:
      KeyId: !Ref MetaflowApiKeyReference
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan


  # API Processor (Lambda)

  DashboardApiLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: credentials_wrapper.lambda_handler
      Runtime: python3.6
      Timeout: 20
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref DashboardLambdaPath
      FunctionName: !Sub ${AWS::StackName}-server
      Role: !GetAtt DashboardLambdaRole.Arn
      TracingConfig: 
        Mode: Active
      Environment:
        Variables:
          EVENTS_SOURCE_STORE: !Ref MetaflowEventStore
          EVENTS_SOURCE_INDEX: !Ref MetaflowEventStoreIndex
          CREDENTIALS_API_URL: !Ref MetaflowCredentialsAutomatorUrl
          METAFLOW_HOME: '/tmp/' 

  ApiGatewayLambdaInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "DashboardApiLambda.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/GET/"

  DashboardLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MetaflowEventStore}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MetaflowEventStore}/*"
        - PolicyName: CloudwatchLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: MetaflowBucketAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource: 
                    - !Sub 'arn:aws:s3:::${MetaflowBucket}'
                    - !Sub 'arn:aws:s3:::${MetaflowBucket}/*'
        - PolicyName: XrayPutTracePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"


Outputs:
  ApiUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api"
